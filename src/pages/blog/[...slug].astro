---
import { getCollection, render } from 'astro:content';

import Layout from '@layouts/Layout.astro';
import PostMetaData from '@components/PostMetaData.astro';
import { createSlug } from '@utils/utils';

export async function getStaticPaths() {
  let posts = await getCollection('posts');

  if (import.meta.env.PROD) {
    posts = posts.filter((draft) => !draft.data.draft);
  }

  // Sort posts by publication date
  let sortedPosts = posts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

  return sortedPosts.map((post, index) => ({
    params: { slug: createSlug(post.data.title) },
    props: {
      post,
      prevPost: sortedPosts[index + 1] || null,
      nextPost: sortedPosts[index - 1] || null,
    },
  }));
}

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await render(post);
---

<Layout title={post.data.title} postdata={post.data}>
  <section
    id="content"
    class="prose max-w-4xl dark:prose-invert prose-p:text-lg prose-h1:mb-2 prose-h2:mb-4 prose-h3:mb-4 prose-p:mb-5 prose-p:mt-0">
    <h1>{post.data.title}</h1>
    <PostMetaData post={post} />
    <Content />
    <footer class="mt-12 flex justify-between items-center text-blue-600 text-base font-medium">
      {
        prevPost && (
          <a href={`/blog/${createSlug(prevPost.data.title)}/`} class="hover:underline">
            &larr; ZurÃ¼ck: {prevPost.data.title}
          </a>
        )
      }
      {
        nextPost && (
          <a href={`/blog/${createSlug(nextPost.data.title)}/`} class="ml-auto hover:underline">
            Weiter: {nextPost.data.title} &rarr;
          </a>
        )
      }
    </footer>
  </section>

  <style>
    :global(img) {
      border: 1px solid var(--color-zinc-200);
      border-radius: 0.5rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: block;
      margin: 0 auto;
      width: 100%; /* Ensures the image scales down */
      height: auto; /* Maintains aspect ratio */
    }

    /* ðŸŒ™ Dark Mode-Anpassung */
    :global(html.dark img) {
      border-color: var(--color-zinc-700);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4); /* etwas stÃ¤rkerer Schatten */
    }

    /* Add media query for smaller screens */
    @media (max-width: 768px) {
      :global(img) {
        max-width: 90%; /* Adjusts the image size for smaller screens */
        margin: 0 auto; /* Centers the image */
      }
    }
  </style>
</Layout>

<!--

Maybe I add this at some point in the future, but for now I want to keep it simple

<style>
    :global(img) {
      border: 1px solid var(--color-zinc-200);
      border-radius: 0.5rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
    }

    :global(img:hover) {
      transform: scale(1.05);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
  </style>
-->
