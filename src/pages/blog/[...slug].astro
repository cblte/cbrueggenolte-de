---
import { getCollection, render } from 'astro:content';

import Layout from '@layouts/Layout.astro';
import PostMetaData from '@components/PostMetaData.astro';
import { createSlug } from '@utils/utils';
import EmailLink from '@components/EmailLink.astro';

export async function getStaticPaths() {
  let posts = await getCollection('posts');

  if (import.meta.env.PROD) {
    posts = posts.filter((draft) => !draft.data.draft);
  }

  // Sort posts by publication date
  let sortedPosts = posts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

  return sortedPosts.map((post, index) => ({
    params: { slug: createSlug(post.data.title) },
    props: {
      post,
      prevPost: sortedPosts[index + 1] || null,
      nextPost: sortedPosts[index - 1] || null,
    },
  }));
}

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await render(post);
---

<Layout title={post.data.title} postdata={post.data}>
  <article id="blogcontent" class="prose max-w-4xl prose-p:text-lg/8 prose-h1:mb-2 prose-h2:mb-4 prose-h3:mb-4 mb-16">
    <header>
      <h1 class="text-center">{post.data.title}</h1>
      <div class="text-center">
        <PostMetaData post={post} />
      </div>
    </header>
    <Content />

    <EmailLink title={post.data.title} user="mail" domain="cbrueggenolte.de" />

    <footer class="mt-12 flex justify-between items-center text-blue-600 text-base font-medium">
      {
        prevPost && (
          <a href={`/blog/${createSlug(prevPost.data.title)}/`} class="hover:underline">
            &larr; Zur√ºck: {prevPost.data.title}
          </a>
        )
      }
      {
        nextPost && (
          <a href={`/blog/${createSlug(nextPost.data.title)}/`} class="ml-auto hover:underline">
            Weiter: {nextPost.data.title} &rarr;
          </a>
        )
      }
    </footer>
  </article>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('pre').forEach((pre) => {
      const button = document.createElement('button');
      button.innerText = 'Copy';
      button.className = 'copy-button';
      pre.appendChild(button);

      button.addEventListener('click', () => {
        const code = pre.querySelector('code').innerText;
        navigator.clipboard.writeText(code).then(() => {
          button.innerText = 'Copied!';
          setTimeout(() => (button.innerText = 'Copy'), 2000);
        });
      });
    });
  });
</script>

<!--

Maybe I add this at some point in the future, but for now I want to keep it simple

<style>
    :global(img) {
      border: 1px solid var(--color-zinc-200);
      border-radius: 0.5rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
    }

    :global(img:hover) {
      transform: scale(1.05);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
  </style>
-->
