# Workflow for building an Astro site and deploying to a custom server via rsync
name: Deploy Astro site to Custom Server

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read

# Allow only one concurrent deployment
concurrency:
  group: "deploy"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder
  # Remote server details - replace these with your own
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  REMOTE_PORT: ${{ secrets.REMOTE_PORT || '22' }}
  REMOTE_PATH: ${{ secrets.REMOTE_PATH }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json
      
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}
      
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: astro-build
          path: ${{ env.BUILD_PATH }}/dist
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Download build artifact
        uses: download-artifact@v4
        with:
          name: astro-build
          path: ./dist
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail # replace to 'ignore' if you want to ignore duplicated keys
      
      - name: Deploy with rsync
        run: |
          rsync -avz --delete \
            -e "ssh -p ${{ env.REMOTE_PORT }}" \
            ./dist/ \
            ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.REMOTE_PATH }}
      
      - name: Deployment status
        run: echo "ðŸš€ Deployed successfully to ${{ env.REMOTE_HOST }}:${{ env.REMOTE_PATH }}"
